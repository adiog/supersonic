// This file is an AUTOGENERATED part of beans project.
// Copyright (c) 2017 Aleksander Gajewski <adiog@quicksave.io>.

#ifndef METABEAN_H
#define METABEAN_H

#include <CppBeans.h>

#include <folly/io/IOBuf.h>
#include <memory>
#include <rapidjson/document.h>
#include <rapidjson/stringbuffer.h>
#include <rapidjson/writer.h>

class MetaBean {
public:
  MetaBean() = default;

  MetaBean(const char *json) : MetaBean(rapidjson::Document{}.Parse(json)) {}

  MetaBean(
      absl::optional<std::string> meta_hash, absl::optional<std::string> author,
      absl::optional<std::string> created_at, absl::optional<std::string> icon,
      absl::optional<std::string> meta_type,
      absl::optional<std::string> modified_at, absl::optional<std::string> name,
      absl::optional<std::string> source_title,
      absl::optional<std::string> source_url, absl::optional<std::string> text,
      absl::optional<std::string> user_hash)
      : meta_hash(meta_hash), author(author), created_at(created_at),
        icon(icon), meta_type(meta_type), modified_at(modified_at), name(name),
        source_title(source_title), source_url(source_url), text(text),
        user_hash(user_hash) {}

  MetaBean(const rapidjson::Value &value) {
    if (value.HasMember(meta_hash_label))
      this->meta_hash = absl::make_optional<std::string>(
          Typoid<std::string>::FromValue(value[meta_hash_label]));
    if (value.HasMember(author_label))
      this->author = absl::make_optional<std::string>(
          Typoid<std::string>::FromValue(value[author_label]));
    if (value.HasMember(created_at_label))
      this->created_at = absl::make_optional<std::string>(
          Typoid<std::string>::FromValue(value[created_at_label]));
    if (value.HasMember(icon_label))
      this->icon = absl::make_optional<std::string>(
          Typoid<std::string>::FromValue(value[icon_label]));
    if (value.HasMember(meta_type_label))
      this->meta_type = absl::make_optional<std::string>(
          Typoid<std::string>::FromValue(value[meta_type_label]));
    if (value.HasMember(modified_at_label))
      this->modified_at = absl::make_optional<std::string>(
          Typoid<std::string>::FromValue(value[modified_at_label]));
    if (value.HasMember(name_label))
      this->name = absl::make_optional<std::string>(
          Typoid<std::string>::FromValue(value[name_label]));
    if (value.HasMember(source_title_label))
      this->source_title = absl::make_optional<std::string>(
          Typoid<std::string>::FromValue(value[source_title_label]));
    if (value.HasMember(source_url_label))
      this->source_url = absl::make_optional<std::string>(
          Typoid<std::string>::FromValue(value[source_url_label]));
    if (value.HasMember(text_label))
      this->text = absl::make_optional<std::string>(
          Typoid<std::string>::FromValue(value[text_label]));
    if (value.HasMember(user_hash_label))
      this->user_hash = absl::make_optional<std::string>(
          Typoid<std::string>::FromValue(value[user_hash_label]));
  }

  void update(MetaBean bean) {
    if (bean.meta_hash)
      meta_hash = bean.meta_hash;
    if (bean.author)
      author = bean.author;
    if (bean.created_at)
      created_at = bean.created_at;
    if (bean.icon)
      icon = bean.icon;
    if (bean.meta_type)
      meta_type = bean.meta_type;
    if (bean.modified_at)
      modified_at = bean.modified_at;
    if (bean.name)
      name = bean.name;
    if (bean.source_title)
      source_title = bean.source_title;
    if (bean.source_url)
      source_url = bean.source_url;
    if (bean.text)
      text = bean.text;
    if (bean.user_hash)
      user_hash = bean.user_hash;
  }

  template <typename Writer> void Serialize(Writer &writer) const {
    writer.StartObject();
    if (meta_hash)
      writer.String(meta_hash_label);
    if (meta_hash)
      Typoid<std::string>::Serialize(*meta_hash, writer);
    if (author)
      writer.String(author_label);
    if (author)
      Typoid<std::string>::Serialize(*author, writer);
    if (created_at)
      writer.String(created_at_label);
    if (created_at)
      Typoid<std::string>::Serialize(*created_at, writer);
    if (icon)
      writer.String(icon_label);
    if (icon)
      Typoid<std::string>::Serialize(*icon, writer);
    if (meta_type)
      writer.String(meta_type_label);
    if (meta_type)
      Typoid<std::string>::Serialize(*meta_type, writer);
    if (modified_at)
      writer.String(modified_at_label);
    if (modified_at)
      Typoid<std::string>::Serialize(*modified_at, writer);
    if (name)
      writer.String(name_label);
    if (name)
      Typoid<std::string>::Serialize(*name, writer);
    if (source_title)
      writer.String(source_title_label);
    if (source_title)
      Typoid<std::string>::Serialize(*source_title, writer);
    if (source_url)
      writer.String(source_url_label);
    if (source_url)
      Typoid<std::string>::Serialize(*source_url, writer);
    if (text)
      writer.String(text_label);
    if (text)
      Typoid<std::string>::Serialize(*text, writer);
    if (user_hash)
      writer.String(user_hash_label);
    if (user_hash)
      Typoid<std::string>::Serialize(*user_hash, writer);
    writer.EndObject();
  }

  std::string to_string() const {
    rapidjson::StringBuffer s;
    rapidjson::Writer<rapidjson::StringBuffer> writer(s);
    Serialize(writer);
    return s.GetString();
  }

  operator std::unique_ptr<folly::IOBuf>() const {
    return folly::IOBuf::copyBuffer(::serialize(*this));
  }

  const char *__name__ = "MetaBean";
  absl::optional<std::string> meta_hash;
  const char *meta_hash_label = "meta_hash";
  absl::optional<std::string> author;
  const char *author_label = "author";
  absl::optional<std::string> created_at;
  const char *created_at_label = "created_at";
  absl::optional<std::string> icon;
  const char *icon_label = "icon";
  absl::optional<std::string> meta_type;
  const char *meta_type_label = "meta_type";
  absl::optional<std::string> modified_at;
  const char *modified_at_label = "modified_at";
  absl::optional<std::string> name;
  const char *name_label = "name";
  absl::optional<std::string> source_title;
  const char *source_title_label = "source_title";
  absl::optional<std::string> source_url;
  const char *source_url_label = "source_url";
  absl::optional<std::string> text;
  const char *text_label = "text";
  absl::optional<std::string> user_hash;
  const char *user_hash_label = "user_hash";
};

#endif
